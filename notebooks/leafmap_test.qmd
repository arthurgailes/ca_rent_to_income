---
format:
  html:
    code-fold: true
editor:
  render-on-save: true
---


```{python}
import numpy as np
import pandas as pd
import geopandas as gpd
import leafmap as leaf
import leafmap.colormaps as cm
```

Load the shapefiles



```{python}
place_geo_data = gpd.read_file("../data/tidy/map_data_income_avm.gpkg")
place_geo_data
```


```{python}
labels = [
      "Highly Inclusive Jurisdictions: 0-2.9",
      "Inclusive Jurisdictions: 3-4.9",
      "At-Risk Jurisdictions: 5-9.9",
      "Exclusionary Jurisdictions: 10-14.9",
      "Extremely Exclusionary Jurisdictions: 15+"]

# color labels from green to red
colors = [
  "#00ff00", "#a6d96a", "#ffffbf", "#fdae61", "#ff0000"
]

# create a dictionary from labels to colors
color_dict = dict(zip(labels, colors))
color_dict
```


```{python}

# Format data for hover
map_data_lab = place_geo_data.copy()

map_data_lab = map_data_lab[map_data_lab["avm_income_ratio"].notna()]

map_data_lab["avm_income_ratio"] = round(map_data_lab["avm_income_ratio"], 1)

map_data_lab["Home Value to Income Ratio Category"] = pd.cut(
    map_data_lab["avm_income_ratio"],
    bins=[0, 2.9, 4.9, 9.9, 14.9, np.inf],
    labels = labels)

# map_data_lab["home_inc_color"] = map_data_lab["Home Value to Income Ratio Category"].map(color_dict)

# convert home value and income columns to dollars
map_data_lab["place_median_avm_2021"] = map_data_lab["place_median_avm_2021"].apply(lambda x: "${:,.0f}".format(x))
map_data_lab["cbsa_median_income_2021"] = map_data_lab["cbsa_median_income_2021"].apply(lambda x: "${:,.0f}".format(x))



map_data_lab = map_data_lab.rename(columns={
  "place": "Place",
  "avm_income_ratio": "Home Value to Income Ratio",
  "place_median_avm_2021": "Median Home Value",
  "cbsa_median_income_2021": "Median Household Income (CBSA)",
  "place_name": "Place Name",
  "cbsa_name": "CBSA Name"})

# drop id columns
map_data_lab = map_data_lab.drop(columns=["cbsa_2020_id", "place_2010_id"])

```

```{python}

map_data_lab.head()
```



```{python}

# create a style callback function that takes a feature and returns a style dictionary
def style_callback(feature):
  return {
    'fillColor': color_dict[feature["properties"]["Home Value to Income Ratio Category"]],
    'fillOpacity': 0.7,
    'color': 'black',
    'weight': 1,
  }
```



```{python}
m = leaf.Map()

m.add_gdf(
  map_data_lab,
  layer_name = "Places",
  style_callback = style_callback)

# m.add_data(
#   place_data_lab,
#   # column = ""Home Value to Income Ratio Category"",
#   style_callback = style_callback)

m.add_legend(
  title = "Ratio of Home Values to Income",
  layer_name = "Places",
  labels = labels,
  colors = colors,
)
m
```
